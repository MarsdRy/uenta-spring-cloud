<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
			http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.uenta.cloud</groupId>
    <artifactId>uenta-spring-cloud</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>${project.artifactId}</name>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.10.RELEASE</version>
        <relativePath/>
    </parent>

    <modules>
        <module>uenta-account-service</module>
        <module>uenta-auth-server</module>
        <module>uenta-config-server</module>
        <module>uenta-gateway-server</module>
        <module>uenta-monitor-server</module>
        <module>uenta-notification-service</module>
        <module>uenta-registry-server</module>
		<module>uenta-statistics-service</module>
        <module>uenta-zipkin-server</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        
        <java.version>1.8</java.version>
        
        <docker.repostory>192.168.0.163</docker.repostory>
        <docker.registry.name>uenta-spring-cloud</docker.registry.name>

        <docker.image.prefix>uenta-spring-cloud</docker.image.prefix>
        <docker.plugin.version>1.0.0</docker.plugin.version>
        <spring.cloud.version>Edgware.SR2</spring.cloud.version>
        <spring-boot-admin.version>1.5.7</spring-boot-admin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
		    <exclusions>
		        <exclusion>
		            <groupId>org.springframework.boot</groupId>
		            <artifactId>spring-boot-starter-logging</artifactId>
		        </exclusion>
		    </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui-hystrix</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui-turbine</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-server-ui-login</artifactId>
                <version>${spring-boot-admin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- 使用@@站位符，输出Dockerfile至docker文件夹 -->
        <!--
        <resources>
            <resource>
                <directory>src/main/docker</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/Dockerfile</include>
                </includes>
                <targetPath>../docker</targetPath>
            </resource>
        </resources>
        -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker.plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                        <!--
	                    <execution>
	                        <id>tag-image</id>
	                        <phase>package</phase>
	                        <goals>
	                            <goal>tag</goal>
	                        </goals>
	                        <configuration>
	                            <image>${docker.registry.name}/${project.artifactId}:${project.version}</image>
	                            <newName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</newName>
	                        </configuration>
	                    </execution>
	                    <execution>
	                        <id>push-image</id>
	                        <phase>deploy</phase>
	                        <goals>
	                            <goal>push</goal>
	                        </goals>
	                        <configuration>
	                            <imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
	                        </configuration>
	                    </execution>
	                    -->
                    </executions>
                    <configuration>
                        <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
                        <!--
                        <serverId>uenta-docker</serverId>
                        <registryUrl>192.168.0.163</registryUrl>
                        -->
                        <!-- <forceTags>true</forceTags> -->
                        <!-- <pushImage>true</pushImage> -->
                        
                        <!--install阶段也上传，否则只有deploy阶段上传-->
                        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                        <!--
                        <imageName>
                            ${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}
                        </imageName>
                        -->
                        <dockerDirectory>${project.basedir}/</dockerDirectory>
                        <!-- <dockerDirectory>target/docker</dockerDirectory>-->
                        <!--docker的tag为项目版本号、latest-->
                        <!--
	                    <imageTags>
	                        <imageTag>${git.commit.id.abbrev}</imageTag>
	                        <imageTag>latest</imageTag>
	                    </imageTags>
                        -->

                        <resources>
                            <!-- 将打包文件放入dockerDirectory指定的位置 -->
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                            <!-- 输出Dockerfile至docker文件夹,如果不使用占位符,可使用以下配置 -->
                            <!-- 
                            <resource>
                               <directory>src/main/docker</directory>
                               <filtering>true</filtering>
                               <includes>
                                   <include>**/Dockerfile</include>
                               </includes>
                               <targetPath>../docker</targetPath>
                            </resource>
                            -->
                        </resources>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>